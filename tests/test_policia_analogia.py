#!/usr/bin/env python3
"""
Script de teste para validar a implementa√ß√£o do caso "policia-analogia".
Testa a detec√ß√£o de chamadas disfar√ßadas e classifica√ß√£o normal.
"""

from classifier import classify_emergency_call, detect_disguised_call

def test_disguised_calls():
    """Testa chamadas disfar√ßadas que devem ser detectadas"""
    print("=== TESTANDO CHAMADAS DISFAR√áADAS ===")
    
    test_cases = [
        "Ol√°, gostaria de pedir uma pizza de espinafre com ketchup",
        "Voc√™s fazem pizza de espinafre com ketchup?",
        "Quero uma pizza de espinafre e ketchup por favor",
        "Tem pizza de espinafre com ketchup no card√°pio?",
    ]
    
    for i, transcript in enumerate(test_cases, 1):
        print(f"\nTeste {i}: {transcript}")
        result = classify_emergency_call(transcript)
        print(f"  Categoria: {result['category']}")
        print(f"  Confian√ßa: {result['confidence']}%")
        print(f"  Motivo: {result['reasoning']}")
        
        # Verifica se foi detectada corretamente
        if result['category'] == 'policia-analogia':
            print("  ‚úÖ CORRETO: Chamada disfar√ßada detectada")
        else:
            print("  ‚ùå ERRO: Chamada disfar√ßada N√ÉO detectada")

def test_normal_calls():
    """Testa chamadas normais que N√ÉO devem ser detectadas como disfar√ßadas"""
    print("\n=== TESTANDO CHAMADAS NORMAIS ===")
    
    test_cases = [
        ("Preciso da pol√≠cia, fui assaltado", "policia"),
        ("Tem uma briga na rua, preciso de ajuda", "policia"),
        ("Quero pedir uma pizza de calabresa", "trote"),
        ("Gostaria de uma pizza de margherita", "trote"),
        ("Tem pizza de frango com catupiry?", "trote"),
    ]
    
    for i, (transcript, expected_category) in enumerate(test_cases, 1):
        print(f"\nTeste {i}: {transcript}")
        result = classify_emergency_call(transcript)
        print(f"  Categoria: {result['category']}")
        print(f"  Confian√ßa: {result['confidence']}%")
        print(f"  Motivo: {result['reasoning']}")
        
        # Verifica se foi classificada corretamente
        if result['category'] == expected_category:
            print(f"  ‚úÖ CORRETO: Classificada como {expected_category}")
        else:
            print(f"  ‚ùå ERRO: Esperado {expected_category}, mas foi {result['category']}")

def test_detection_function():
    """Testa a fun√ß√£o de detec√ß√£o diretamente"""
    print("\n=== TESTANDO FUN√á√ÉO DE DETEC√á√ÉO DIRETA ===")
    
    test_cases = [
        ("pizza de espinafre com ketchup", True),
        ("quero uma pizza de espinafre e ketchup", True),
        ("pizza de calabresa", False),
        ("pizza de margherita", False),
        ("espinafre ketchup pizza", True),
    ]
    
    for transcript, expected in test_cases:
        result = detect_disguised_call(transcript)
        detected = result['is_disguised']
        print(f"Texto: '{transcript}'")
        print(f"Esperado: {expected}, Detectado: {detected}")
        
        if detected == expected:
            print("  ‚úÖ CORRETO")
        else:
            print("  ‚ùå ERRO")
        print()

if __name__ == "__main__":
    print("üß™ INICIANDO TESTES DO SISTEMA POLICIA-ANALOGIA")
    print("=" * 60)
    
    test_detection_function()
    test_disguised_calls()
    test_normal_calls()
    
    print("\n" + "=" * 60)
    print("‚úÖ TESTES CONCLU√çDOS")
